/**
 * Copyright (C) 2025  Antonio Tari
 *
 * This file is a part of Power Ampache 2
 * Ampache Android client application
 * @author Antonio Tari
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package luci.sixsixsix.powerampache2.data.local.datasource

import luci.sixsixsix.powerampache2.data.local.MusicDatabase
import luci.sixsixsix.powerampache2.data.local.entities.PlaylistSongEntity
import luci.sixsixsix.powerampache2.data.local.entities.toSong
import luci.sixsixsix.powerampache2.di.LocalDataSource
import luci.sixsixsix.powerampache2.domain.datasource.PlaylistsDbDataSource
import luci.sixsixsix.powerampache2.domain.models.Playlist
import luci.sixsixsix.powerampache2.domain.models.Song
import luci.sixsixsix.powerampache2.domain.models.isSmartPlaylist
import javax.inject.Inject
import javax.inject.Singleton

@LocalDataSource
@Singleton
class PlaylistsDbDataSourceImpl @Inject constructor(db: MusicDatabase): PlaylistsDbDataSource {
    private val dao = db.dao

    override suspend fun savePlaylistSongsToDb(
        songs: List<Song>,
        playlistId: String,
        username: String,
        serverUrl: String
    ) {
        dao.clearPlaylistSongs(playlistId)
        dao.insertPlaylistSongs(PlaylistSongEntity.newEntries(songs, playlistId, username = username, serverUrl = serverUrl))
    }

    /**
     * Smartlists are never fetched from db (unless in offline-mode, see OfflineDataSource) to avoid
     * flickering UI, since they are generated by the backend each time.
     */
    override suspend fun getSongsFromPlaylist(playlist: Playlist): List<Song> =
        if (playlist.isSmartPlaylist().not())
            dao.getSongsFromPlaylist(playlist.id).map { it.toSong() }
        else listOf()
}
